#!/bin/bash
CURRENT_VERSION=1.0.2

usage()
{
    echo "usage:  bash deploy/run.sh [-a] | [-u] | [-d] | [-s] | [-m] | [-v]"
}

vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

NEW_VERSION=$(curl -s "https://api.github.com/repos/magefan/magento2-zero-downtime-deploy/releases/latest" | awk -F '"' '/tag_name/{print $4}')
if [ $NEW_VERSION ]; then 
    vercomp $NEW_VERSION $CURRENT_VERSION
    case $? in
        1) 
            echo -e "\e[32m${1}There is a new Zero Downtime v$NEW_VERSION available. Your current version is $CURRENT_VERSION \e[0m"
            echo -e "\e[32m${1}To install the newest version remove the current one and install the script again:\e[0m"
            echo -e "\e[32m${1}https://magefan.com/blog/magento-2-zero-downtime-deployment\e[0m"
      
    ;;
    esac
fi

if [ $# -gt 0 ]; then
    echo ''
else
    SETUP_ALL=1
fi


LAST_OPTION='';
SETUP_MODULES=''
while [ "$1" != "" ]; do
    case $1 in
        -a | --all | -u | --upgrade )       
            SETUP_ALL=1
            ;;
        -d | --di )
            SETUP_DI=1
            ;;
        -s | --static-content )
            SETUP_STATIC_CONTENT=1
            ;;
        -v | --version )
            echo $CURRENT_VERSION
            exit
            ;;
        -m | --modules )
            #do nothing here
            ;;
        -h | --help )
            usage
            exit
            ;;
        * )
            if [ "$LAST_OPTION" != -m ] && [ "$LAST_OPTION" != --modules ]; then
                usage
                exit 1
            else
                SETUP_MODULES="$SETUP_MODULES $1"
                shift
                continue
            fi
    esac
    LAST_OPTION=$1
    shift
done

if [ "$SETUP_MODULES" ]; then
    SETUP_ALL=1
fi

MDIR="$PWD"
DIR="$PWD/deploy"
cd $DIR
INSTANCE="$PWD/instance"
MAGE_INIT_PARAMS="--magento-init-params=MAGE_DIRS[base][path]=$INSTANCE&MAGE_DIRS[cache][path]=$INSTANCE/var/cache"

echo 'Remove old files ...'
rm -rf $INSTANCE
echo 'Create TMP instance folders and files ...'
mkdir -p $INSTANCE;

cd $INSTANCE

mkdir -p generated;
mkdir -p pub;
mkdir -p pub/static;
mkdir -p var;

cp -rf $MDIR/app app
cp -rf $MDIR/bin bin
cp -rf $MDIR/dev dev
cp -rf $MDIR/lib lib
cp -rf $MDIR/setup setup
cp -rf $MDIR/vendor vendor
cp -rf $MDIR/phpserver phpserver
#cp -rf $MDIR/update update
cp -rf $MDIR/composer.json composer.json
cp -rf $MDIR/composer.lock composer.lock
cp -rf $MDIR/auth.json auth.json
#cp -rf $MDIR/patches patches
cp -rf "$MDIR/.git" ".git"


# temporary copy env.php file with save cache local
rm app/etc/env.php
cp -rf $DIR/app/env.php app/etc/env.php

#-------------------------------------
#Git & Composer
cd $INSTANCE
#Pull from Git
git pull origin master
#Install Composer Packages
composer install
#-------------------------------------

cd $INSTANCE

if [ "$SETUP_MODULES" ]; then
    echo 'Enabling modules ...'
    php -dmemory_limit=-1 bin/magento module:enable $SETUP_MODULES $MAGE_INIT_PARAMS
fi

echo 'Start deploying ...'

if [ $SETUP_ALL ] || [ $SETUP_DI ]; then
    php -dmemory_limit=-1 bin/magento setup:di:compile
fi

if [ $SETUP_ALL ] || [ $SETUP_STATIC_CONTENT ]; then
    #$INSTANCE/bin/magento setup:static-content:deploy
    . "$DIR/app/static-content-deploy.sh"
    cd $INSTANCE
fi


if [ $SETUP_ALL ]; then
    #cd $MDIR
    #php -dmemory_limit=-1 bin/magento maintenance:enable
    cd $INSTANCE
    php -dmemory_limit=-1 bin/magento setup:upgrade --keep-generated $MAGE_INIT_PARAMS
fi


if [ $SETUP_ALL ]; then
    GENERATED_FOLDERS=( "app/etc/config.php" "generated" "pub/static/adminhtml" "pub/static/frontend" "pub/static/deployed_version.txt" "var/view_preprocessed" )
else
    GENERATED_FOLDERS=( "app/etc/config.php" )
    if [ $SETUP_DI ]; then
        GENERATED_FOLDERS+=( "generated")
    fi
    if [ $SETUP_STATIC_CONTENT ]; then
        GENERATED_FOLDERS+=( "pub/static/adminhtml" "pub/static/frontend" "pub/static/deployed_version.txt" "var/view_preprocessed" )
    fi
fi


cd $INSTANCE
echo 'Move new files into Magento ... '
for i in "${GENERATED_FOLDERS[@]}"
do
   : 
   mv $i "$MDIR/$i-deploy"
done

#-------------------------------------
#Git & Composer
cd $MDIR
#Pull from Git
git pull origin master
#Install Composer Packages
composer install
#-------------------------------------

cd $INSTANCE
echo 'Replace files in Magento ... '
for i in "${GENERATED_FOLDERS[@]}"
do
   : 
   mv "$MDIR/$i" "$MDIR/$i-old-deploy"
   mv "$MDIR/$i-deploy" "$MDIR/$i"
done

cd $INSTANCE
echo 'Remove magento pub/static/_cache ... '
rm -rf "$MDIR/pub/static/_cache"
rm -rf "$MDIR/var/.regenerate"

#if [ $SETUP_ALL ]; then
#    cd $MDIR
#    php -dmemory_limit=-1 bin/magento maintenance:disable
#fi

cd $INSTANCE
echo 'Replace old Magento files ... '
for i in "${GENERATED_FOLDERS[@]}"
do
   : 
   rm -rf "$MDIR/$i-old-deploy"
done

cd $MDIR
echo 'Flush the cache ...'
php -dmemory_limit=-1 bin/magento c:e
php -dmemory_limit=-1 bin/magento c:f

cd $MDIR
echo 'Remove tmp files ...'
rm -rf $INSTANCE

echo 'Finished.'
